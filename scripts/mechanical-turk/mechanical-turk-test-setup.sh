#!/bin/bash

# Fusion+ Mechanical Turk - Manual Test Setup Script
# This script creates identities and sets up environment variables for cross-chain testing

set -e  # Exit on any error

echo "🔧 Setting up Fusion+ Mechanical Turk test environment..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if dfx is available
if ! command -v dfx &> /dev/null; then
    print_error "dfx is not installed or not in PATH"
    exit 1
fi

# Check if we're in the right directory
if [ ! -f "dfx.json" ]; then
    print_error "Please run this script from the project root directory (where dfx.json is located)"
    exit 1
fi

print_status "Setting up Fusion+ Mechanical Turk identities..."

# Create identities if they don't exist
if ! dfx identity list | grep -q "maker"; then
    print_status "Creating maker identity..."
    dfx identity new maker --storage-mode=plaintext
fi

if ! dfx identity list | grep -q "resolver"; then
    print_status "Creating resolver identity..."
    dfx identity new resolver --storage-mode=plaintext
fi

if ! dfx identity list | grep -q "relayer"; then
    print_status "Creating relayer identity..."
    dfx identity new relayer --storage-mode=plaintext
fi

print_status "Getting principal IDs..."

# Switch to maker identity and get principal
dfx identity use maker
MAKER_PRINCIPAL=$(dfx identity get-principal)
print_success "Maker principal: $MAKER_PRINCIPAL"

# Switch to resolver identity and get principal
dfx identity use resolver
RESOLVER_PRINCIPAL=$(dfx identity get-principal)
print_success "Resolver principal: $RESOLVER_PRINCIPAL"

# Switch to relayer identity and get principal
dfx identity use relayer
RELAYER_PRINCIPAL=$(dfx identity get-principal)
print_success "Relayer principal: $RELAYER_PRINCIPAL"

# Switch back to default identity
dfx identity use default
DEFAULT_PRINCIPAL=$(dfx identity get-principal)
print_success "Default principal: $DEFAULT_PRINCIPAL"

# Get fusion canister IDs
print_status "Getting fusion canister IDs..."
if dfx canister id orderbook &> /dev/null && dfx canister id escrow &> /dev/null; then
    ORDERBOOK_CANISTER_ID=$(dfx canister id orderbook)
    ESCROW_CANISTER_ID=$(dfx canister id escrow)
    print_success "orderbook: $ORDERBOOK_CANISTER_ID"
    print_success "escrow: $ESCROW_CANISTER_ID"
else
    print_warning "Fusion canisters not found - deploy with: ./scripts/deploy-mechanical-turk.sh"
    ORDERBOOK_CANISTER_ID=""
    ESCROW_CANISTER_ID=""
fi

# Get test token canister IDs (for ICP-side testing)
print_status "Getting test token canister IDs..."
if dfx canister id test_token_a &> /dev/null && dfx canister id test_token_b &> /dev/null; then
    TEST_TOKEN_A=$(dfx canister id test_token_a)
    TEST_TOKEN_B=$(dfx canister id test_token_b)
    print_success "test_token_a (mock ICP): $TEST_TOKEN_A"
    print_success "test_token_b (mock ETH): $TEST_TOKEN_B"
else
    print_warning "Test tokens not found - deploy with: ./scripts/deploy-local.sh first"
    TEST_TOKEN_A=""
    TEST_TOKEN_B=""
fi

# Create environment file
ENV_FILE=".env.mechanical-turk"
print_status "Creating environment file: $ENV_FILE"

cat > "$ENV_FILE" << EOF
# Fusion+ Mechanical Turk - Test Environment Variables
# Generated by mechanical-turk-test-setup.sh

# Cross-Chain Identity Principals
export MAKER_PRINCIPAL="$MAKER_PRINCIPAL"
export RESOLVER_PRINCIPAL="$RESOLVER_PRINCIPAL"
export RELAYER_PRINCIPAL="$RELAYER_PRINCIPAL"
export DEFAULT_PRINCIPAL="$DEFAULT_PRINCIPAL"

# Fusion Canister IDs
export ORDERBOOK_CANISTER_ID="$ORDERBOOK_CANISTER_ID"
export ESCROW_CANISTER_ID="$ESCROW_CANISTER_ID"

# Test Token Canister IDs (for ICP-side testing)
export TEST_TOKEN_A="$TEST_TOKEN_A"  # Mock ICP
export TEST_TOKEN_B="$TEST_TOKEN_B"  # Mock ETH

# Mock Ethereum Addresses (for testing cross-chain identity)
export MAKER_ETH_ADDRESS="0x742d35Cc6634C0532925a3b8D4C0532925a3b8D4"
export RESOLVER_ETH_ADDRESS="0x8ba1f109551bD432803012645Hac189451b934"

# Cross-Chain Swap Parameters (for testing)
export ICP_AMOUNT="1000000000"      # 10 ICP (8 decimals)
export ETH_AMOUNT="10000000000000000"  # 0.01 ETH (18 decimals)
export ORDER_EXPIRATION="\$(($(date +%s) + 3600))000000000"  # 1 hour from now

# Ethereum Test Configuration (Sepolia)
export ETH_RPC_URL="https://sepolia.infura.io/v3/YOUR_INFURA_KEY"
export ETH_CHAIN_ID="11155111"
export ETH_ESCROW_CONTRACT=""  # Will be populated after Ethereum deployment
EOF

print_success "Environment file created: $ENV_FILE"
print_status "To use these variables, run: source .env.mechanical-turk"

# Create sample Ethereum addresses file for reference
ADDRESSES_FILE="scripts/mechanical-turk/ethereum-addresses.md"
print_status "Creating Ethereum addresses reference: $ADDRESSES_FILE"

cat > "$ADDRESSES_FILE" << EOF
# Ethereum Test Addresses

## Test Accounts (for Sepolia testnet)

### Maker Account
- **Address**: \`0x742d35Cc6634C0532925a3b8D4C0532925a3b8D4\`
- **Private Key**: \`0x...\` (Add your test private key)
- **Purpose**: Creates cross-chain orders (ICP → ETH or ETH → ICP)

### Resolver Account  
- **Address**: \`0x8ba1f109551bD432803012645Hac189451b934\`
- **Private Key**: \`0x...\` (Add your test private key)
- **Purpose**: Accepts and fulfills cross-chain orders

### Relayer Account
- **Address**: \`0x...\` (Add relayer address)
- **Private Key**: \`0x...\` (Add your test private key)
- **Purpose**: Coordinates cross-chain swaps, pays gas fees

## Contract Addresses (Sepolia)

### Fusion Escrow Contract
- **Address**: \`0x...\` (Will be populated after deployment)
- **Purpose**: Handles ETH-side escrow for atomic swaps

### Test Token Contracts
- **Mock ICP Token**: \`0x...\` (ERC-20 for testing)
- **Mock ETH Token**: Native ETH or WETH

## Setup Instructions

1. **Get Sepolia ETH**: Use faucet to fund test accounts
2. **Deploy contracts**: Run Hardhat deployment script
3. **Update addresses**: Fill in actual deployed contract addresses
4. **Test cross-chain**: Use mechanical turk test guide

## Security Notes

⚠️ **Never use real private keys or mainnet addresses for testing!**
EOF

# Final instructions
echo ""
echo "=================================================="
print_success "Mechanical Turk setup completed successfully!"
echo ""
echo "Environment file created: .env.mechanical-turk"
echo "Ethereum reference created: scripts/mechanical-turk/ethereum-addresses.md"
echo ""
echo "To use the variables in your shell:"
echo "  source .env.mechanical-turk"
echo ""
echo "Available identities:"
echo "  • Maker: \$MAKER_PRINCIPAL (\$MAKER_ETH_ADDRESS)"
echo "  • Resolver: \$RESOLVER_PRINCIPAL (\$RESOLVER_ETH_ADDRESS)"
echo "  • Relayer: \$RELAYER_PRINCIPAL"
echo ""
echo "Test scenarios:"
echo "  • ICP → ETH: Maker locks ICP, Resolver provides ETH"
echo "  • ETH → ICP: Maker signs EIP-712, Resolver provides ICP"
echo ""
echo "Next steps:"
echo "1. Deploy fusion canisters: ./scripts/deploy-mechanical-turk.sh"
echo "2. Set up Ethereum contracts: cd ethereum && npm run deploy:sepolia"
echo "3. Run manual tests: ./scripts/mechanical-turk/mechanical-turk-manual-test.sh"
echo "4. Follow guide: scripts/mechanical-turk/mechanical-turk-manual-guide.md"
echo "=================================================="