#!/bin/bash

# ICP Limit Order Protocol - Manual Test Setup Script
# This script creates identities and sets up environment variables for realistic testing

set -e  # Exit on any error

echo "ðŸ”§ Setting up ICP Limit Order Protocol test environment..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if dfx is available
if ! command -v dfx &> /dev/null; then
    print_error "dfx is not installed or not in PATH"
    exit 1
fi

# Check if we're in the right directory
if [ ! -f "dfx.json" ]; then
    print_error "Please run this script from the project root directory (where dfx.json is located)"
    exit 1
fi

print_status "Getting existing identity principals..."

# Check if identities exist
if ! dfx identity list | grep -q "maker"; then
    print_error "Identity 'maker' does not exist. Create it first with: dfx identity new maker"
    exit 1
fi

if ! dfx identity list | grep -q "taker"; then
    print_error "Identity 'taker' does not exist. Create it first with: dfx identity new taker"
    exit 1
fi

# Get principals
print_status "Getting principal IDs..."

# Switch to maker identity and get principal
dfx identity use maker
MAKER_PRINCIPAL=$(dfx identity get-principal)
print_success "Maker principal: $MAKER_PRINCIPAL"

# Switch to taker identity and get principal
dfx identity use taker
TAKER_PRINCIPAL=$(dfx identity get-principal)
print_success "Taker principal: $TAKER_PRINCIPAL"

# Switch back to default identity
dfx identity use default
DEFAULT_PRINCIPAL=$(dfx identity get-principal)
print_success "Default principal: $DEFAULT_PRINCIPAL"

# Use test_token canister for taker asset (local testing)
print_status "Getting test_token canister ID for taker asset..."
if dfx canister id test_token &> /dev/null; then
    TEST_TAKER_ASSET=$(dfx canister id test_token)
    print_success "Using test_token canister: $TEST_TAKER_ASSET"
else
    print_warning "test_token canister not found - some tests may not work properly"
    print_warning "For full testing, deploy with: ./scripts/deploy-local.sh"
    TEST_TAKER_ASSET="ss2fx-dyaaa-aaaar-qacoq-cai"
    print_success "Using ckETH Ledger principal: $TEST_TAKER_ASSET"
fi

# Create environment file
ENV_FILE=".env.test"
print_status "Creating environment file: $ENV_FILE"

cat > "$ENV_FILE" << EOF
# ICP Limit Order Protocol - Test Environment Variables
# Generated by limit-order-manual-test-setup.sh

# Identity Principals
export MAKER_PRINCIPAL="$MAKER_PRINCIPAL"
export TAKER_PRINCIPAL="$TAKER_PRINCIPAL"
export DEFAULT_PRINCIPAL="$DEFAULT_PRINCIPAL"


# Real Token Principals (ICP + ckETH)
export TEST_MAKER_ASSET="aaaaa-aa"
export TEST_TAKER_ASSET="$TEST_TAKER_ASSET"

# Canister IDs (will be populated after deployment)
export BACKEND_CANISTER_ID=""
export FRONTEND_CANISTER_ID=""
EOF

print_success "Environment file created: $ENV_FILE"
print_status "To use these variables, run: source .env.test"

# Final instructions
echo ""
echo "=================================================="
print_success "Setup completed successfully!"
echo ""
echo "Environment file created: .env.test"
echo "To use the variables in your shell:"
echo "  source .env.test"
echo ""
echo "Then you can use:"
echo "  \$MAKER_PRINCIPAL"
echo "  \$TAKER_PRINCIPAL"
echo "  \$DEFAULT_PRINCIPAL"
echo "  \$TEST_TAKER_ASSET"
echo ""
echo "Next steps:"
echo "1. Deploy: dfx start --clean && dfx deploy"
echo "2. Test: ./scripts/test-limit-orders-manual.sh"
echo "==================================================" 