#!/bin/bash

# ICP Limit Order Protocol - Manual Test Setup Script
# This script creates identities and sets up environment variables for realistic testing

set -e  # Exit on any error

echo "ðŸ”§ Setting up ICP Limit Order Protocol test environment..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if dfx is available
if ! command -v dfx &> /dev/null; then
    print_error "dfx is not installed or not in PATH"
    exit 1
fi

# Check if we're in the right directory
if [ ! -f "dfx.json" ]; then
    print_error "Please run this script from the project root directory (where dfx.json is located)"
    exit 1
fi

print_status "Getting existing identity principals..."

# Check if identities exist
if ! dfx identity list | grep -q "maker"; then
    print_error "Identity 'maker' does not exist. Create it first with: dfx identity new maker"
    exit 1
fi

if ! dfx identity list | grep -q "taker"; then
    print_error "Identity 'taker' does not exist. Create it first with: dfx identity new taker"
    exit 1
fi

# Get principals
print_status "Getting principal IDs..."

# Switch to maker identity and get principal
dfx identity use maker
MAKER_PRINCIPAL=$(dfx identity get-principal)
print_success "Maker principal: $MAKER_PRINCIPAL"

# Switch to taker identity and get principal
dfx identity use taker
TAKER_PRINCIPAL=$(dfx identity get-principal)
print_success "Taker principal: $TAKER_PRINCIPAL"

# Switch back to default identity
dfx identity use default
DEFAULT_PRINCIPAL=$(dfx identity get-principal)
print_success "Default principal: $DEFAULT_PRINCIPAL"

# Get test token canister IDs (can be used in either direction)
print_status "Getting test token canister IDs..."
if dfx canister id test_token_a &> /dev/null && dfx canister id test_token_b &> /dev/null; then
    TEST_TOKEN_A=$(dfx canister id test_token_a)
    TEST_TOKEN_B=$(dfx canister id test_token_b)
    print_success "test_token_a: $TEST_TOKEN_A"
    print_success "test_token_b: $TEST_TOKEN_B"
    print_status "Note: These tokens can be used in either direction for testing"
else
    print_warning "Test tokens not found - deploy with: ./scripts/deploy-local.sh"
    TEST_TOKEN_A="ucwa4-rx777-77774-qaada-cai"
    TEST_TOKEN_B="ufxgi-4p777-77774-qaadq-cai"
    print_success "Using default test token IDs"
fi

# Get backend canister ID
print_status "Getting backend canister ID..."
if dfx canister id backend &> /dev/null; then
    BACKEND_CANISTER_ID=$(dfx canister id backend)
    print_success "backend: $BACKEND_CANISTER_ID"
else
    print_warning "Backend canister not found - deploy with: ./scripts/deploy-local.sh"
    BACKEND_CANISTER_ID=""
fi

# Create environment file
ENV_FILE=".env.test"
print_status "Creating environment file: $ENV_FILE"

cat > "$ENV_FILE" << EOF
# ICP Limit Order Protocol - Test Environment Variables
# Generated by limit-order-manual-test-setup.sh

# Identity Principals
export MAKER_PRINCIPAL="$MAKER_PRINCIPAL"
export TAKER_PRINCIPAL="$TAKER_PRINCIPAL"
export DEFAULT_PRINCIPAL="$DEFAULT_PRINCIPAL"


# Test Token Canister IDs (can be used in either direction)
export TEST_TOKEN_A="$TEST_TOKEN_A"
export TEST_TOKEN_B="$TEST_TOKEN_B"

# Backend Canister ID
export BACKEND_CANISTER_ID="$BACKEND_CANISTER_ID"

# Canister IDs (will be populated after deployment)
export FRONTEND_CANISTER_ID=""
EOF

print_success "Environment file created: $ENV_FILE"
print_status "To use these variables, run: source .env.test"

# Final instructions
echo ""
echo "=================================================="
print_success "Setup completed successfully!"
echo ""
echo "Environment file created: .env.test"
echo "To use the variables in your shell:"
echo "  source .env.test"
echo ""
echo "Then you can use:"
echo "  \$MAKER_PRINCIPAL"
echo "  \$TAKER_PRINCIPAL"
echo "  \$DEFAULT_PRINCIPAL"
echo "  \$TEST_TOKEN_A"
echo "  \$TEST_TOKEN_B"
echo ""
echo "Test scenarios:"
echo "  - Sell TOKEN_A for TOKEN_B: maker_asset=\$TEST_TOKEN_A, taker_asset=\$TEST_TOKEN_B"
echo "  - Sell TOKEN_B for TOKEN_A: maker_asset=\$TEST_TOKEN_B, taker_asset=\$TEST_TOKEN_A"
echo ""
echo "Next steps:"
echo "1. Deploy: dfx start --clean && dfx deploy"
echo "2. Test: ./scripts/test-limit-orders-manual.sh"
echo "==================================================" 