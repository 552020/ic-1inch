type EscrowError = variant {
  SystemError;
  OrderNotFound;
  InsufficientBalance;
  EscrowNotFound;
  TimelockExpired;
  InvalidReceipt;
  Unauthorized;
  TransferFailed;
  TimelockNotExpired;
  InvalidState;
  ThresholdECDSAUnavailable;
  EVMAddressDerivationFailed;
  EVMEscrowCreationFailed;
};
type EscrowStatus = variant { Refunded; Claimed; Funded; Created };
type FusionEscrow = record {
  id : text;
  status : EscrowStatus;
  resolver : principal;
  eth_receipt : opt text;
  locked_at : nat64;
  locked_by : principal;
  token : Token;
  order_id : text;
  amount : nat64;
  timelock : nat64;
};
type Result = variant { Ok; Err : EscrowError };
type Result_1 = variant { Ok : text; Err : EscrowError };
type Token = variant { ETH; ICP };
service : {
  claim_locked_icp : (text, text) -> (Result);
  fund_escrow : (text) -> (Result);
  get_fusion_escrow_status : (text) -> (opt FusionEscrow) query;
  is_tokens_locked : (text) -> (bool) query;
  list_fusion_escrows : () -> (vec FusionEscrow) query;
  lock_icp_for_order : (text, nat64, nat64) -> (Result_1);
  lock_icp_for_swap : (text, nat64, principal, nat64) -> (Result_1);
  refund_locked_icp : (text) -> (Result);
  
  // Chain Fusion API - Task 5
  check_threshold_ecdsa_health : () -> (variant { Ok : variant { Healthy; Degraded; Unavailable }; Err : EscrowError });
  derive_deterministic_evm_address : (text) -> (variant { Ok : text; Err : EscrowError });
  get_chain_fusion_config : () -> (variant { Ok : text; Err : EscrowError }) query;
  create_evm_escrow_via_chain_fusion : (text, text, text, text, text, nat64, nat64, nat64, nat64, nat64, text, text, nat64, nat64) -> (variant { Ok : text; Err : EscrowError });
  verify_evm_escrow_state : (text) -> (variant { Ok : bool; Err : EscrowError });
}
