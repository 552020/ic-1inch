type Order = record {
  id : nat64;
  maker : principal;
  maker_asset : principal;
  taking_amount : nat64;
  metadata : opt OrderMetadata;
  making_amount : nat64;
  created_at : nat64;
  expiration : nat64;
  taker_asset : principal;
  receiver : principal;
};
type OrderError = variant {
  InvalidAssetPair;
  OrderCancelled;
  BalanceCheckFailed : text;
  InvalidAmount;
  TokenNotSupported : text;
  MemoryError : text;
  OrderInactive;
  OrderCreationRateLimited;
  NotOrderMaker;
  SystemError : text;
  OrderNotFound;
  InsufficientBalance;
  InvalidPrincipal;
  OrderExpired;
  InvalidReceiver;
  Unauthorized;
  OrderAlreadyFilled;
  InvalidExpiration;
  ConcurrencyError : text;
  TooManyOrders;
  TokenCallFailed : text;
  TransferFailed : text;
  InvalidOrderId;
  SystemOverloaded;
  AnonymousCaller;
};
type OrderMetadata = record {
  hashlock : opt blob;
  target_chain : opt text;
  timelock : opt nat64;
};
type Result = variant { Ok; Err : OrderError };
type Result_1 = variant { Ok : nat64; Err : OrderError };
type SystemStats = record {
  error_counts : vec record { text; nat64 };
  orders_filled : nat64;
  total_volume : vec record { principal; nat64 };
  orders_created : nat64;
  orders_cancelled : nat64;
};
service : {
  cancel_order : (nat64) -> (Result);
  create_order : (principal, principal, principal, nat64, nat64, nat64) -> (
      Result_1,
    );
  fill_order : (nat64) -> (Result);
  get_active_orders : () -> (vec Order) query;
  get_order_by_id : (nat64) -> (opt Order) query;
  get_orders_by_asset_pair : (principal, principal) -> (vec Order) query;
  get_orders_by_maker : (principal) -> (vec Order) query;
  get_system_stats : () -> (SystemStats) query;
  greet : (text) -> (text) query;
}
