type OrderType = variant {
  Normal;
  Fusion;
  CrossChain;
};
type ProcessingStrategy = variant {
  DirectTransfer;
  EscrowCoordination;
};
type MakerTraits = variant {
  None;
  PreferFillOrKill;
  PreferPartialFill;
  HasExtension;
};
type TakerTraits = variant {
  None;
  PreferFillOrKill;
  PreferPartialFill;
  HasExtension;
};
type Order = record {
  id : nat64;
  maker : principal;
  maker_asset : principal;
  taking_amount : nat64;
  metadata : opt OrderMetadata;
  making_amount : nat64;
  created_at : nat64;
  expiration : nat64;
  taker_asset : principal;
  receiver : principal;
  order_type : OrderType;
  processing_strategy : ProcessingStrategy;
  salt : nat64;
  maker_traits : MakerTraits;
  taker_traits : TakerTraits;
};
type OrderMetadata = record {
  hashlock : opt blob;
  target_chain : opt text;
  timelock : opt nat64;
  chain_id : opt nat32;
  safety_deposit : opt nat64;
  escrow_address : opt text;
  resolver_address : opt text;
  preimage : opt blob;
};
type OrderState = variant {
  Active;
  Pending;
  EscrowCreated;
  Filled;
  Cancelled;
  Expired;
  Failed;
};
type OrderError = variant {
  InvalidAssetPair;
  OrderCancelled;
  BalanceCheckFailed : text;
  InvalidAmount;
  TokenNotSupported : text;
  MemoryError : text;
  OrderInactive;
  OrderCreationRateLimited;
  NotOrderMaker;
  SystemError : text;
  OrderNotFound;
  InsufficientBalance;
  InvalidPrincipal;
  OrderExpired;
  InvalidReceiver;
  Unauthorized;
  OrderAlreadyFilled;
  InvalidExpiration;
  ConcurrencyError : text;
  TooManyOrders;
  TokenCallFailed : text;
  TransferFailed : text;
  InvalidOrderId;
  SystemOverloaded;
  AnonymousCaller;
  InvalidHashlock;
  HashlockNotFound;
  TimelockExpired;
  CrossChainCoordinationFailed;
  InvalidPreimage;
  EscrowManagerUnavailable;
  EscrowCreationFailed : text;
  EscrowCompletionFailed : text;
  CrossCanisterCallFailed : text;
  InvalidOrderType;
  UnsupportedOrderType;
  EscrowNotFound;
  EscrowAlreadyCompleted;
  EscrowExpired;
  HashlockVerificationFailed;
};
type Result = variant { Ok; Err : OrderError };
type Result_1 = variant { Ok : nat64; Err : OrderError };
type SystemStats = record {
  error_counts : vec record { text; nat64 };
  orders_filled : nat64;
  total_volume : vec record { principal; nat64 };
  orders_created : nat64;
  orders_cancelled : nat64;
};
type HashlockInfo = record {
  order_id : nat64;
  hashlock : blob;
  preimage : opt blob;
  created_at : nat64;
  revealed_at : opt nat64;
};
type TimelockInfo = record {
  order_id : nat64;
  timelock : nat64;
  created_at : nat64;
  expires_at : nat64;
};
type CrossChainParams = record {
  target_chain : opt text;
  chain_id : opt nat32;
  hashlock : opt blob;
  timelock : opt nat64;
  safety_deposit : opt nat64;
};
type CrossChainStats = record {
  total_cross_chain_orders : nat64;
  completed_swaps : nat64;
  failed_swaps : nat64;
  expired_orders : nat64;
  volume_by_chain : vec record { text; nat64 };
  average_completion_time : nat64;
};
type CrossChainOrder = record {
  order_id : nat64;
  hashlock : blob;
  timelock : nat64;
  target_chain : text;
  escrow_address : opt text;
  status : CrossChainStatus;
};
type CrossChainStatus = variant {
  Pending;
  EscrowCreated;
  Filled;
  Expired;
  Failed;
};
type Result_2 = variant { Ok : text; Err : OrderError };
service : {
  cancel_order : (nat64) -> (Result);
  create_order : (principal, principal, principal, nat64, nat64, nat64) -> (
      Result_1,
    );
  fill_order : (nat64) -> (Result);
  get_active_orders : () -> (vec Order) query;
  get_order_by_id : (nat64) -> (opt Order) query;
  get_orders_by_asset_pair : (principal, principal) -> (vec Order) query;
  get_orders_by_maker : (principal) -> (vec Order) query;
  get_system_stats : () -> (SystemStats) query;
  greet : (text) -> (text) query;
  create_cross_chain_order : (principal, principal, principal, nat64, nat64, nat64, CrossChainParams) -> (
      Result_1,
    );
  fill_cross_chain_order : (nat64, blob) -> (Result);
  reveal_hashlock : (nat64, blob) -> (Result);
  get_hashlock_info : (blob) -> (opt HashlockInfo) query;
  get_timelock_info : (nat64) -> (opt TimelockInfo) query;
  is_timelock_expired : (nat64) -> (bool) query;
  get_timelock_remaining_time : (nat64) -> (opt nat64) query;
  get_cross_chain_orders : () -> (vec CrossChainOrder) query;
  get_cross_chain_stats : () -> (CrossChainStats) query;
  hackathon_demo : () -> (Result_2);
  create_cross_chain_order_mvp : (principal, principal, principal, nat64, nat64, text) -> (
      Result_1,
    );
  execute_cross_chain_swap_mvp : (nat64, blob) -> (Result);
  simulate_evm_coordination : () -> (text) query;
};
