type Account = record {
  owner : principal;
  subaccount : opt vec nat8;
};

type TransferArgs = record {
  from_subaccount : opt vec nat8;
  to : Account;
  amount : nat;
  fee : opt nat;
  memo : opt vec nat8;
  created_at_time : opt nat64;
};

type TransferError = variant {
  BadFee : record { expected_fee : nat };
  BadBurn : record { min_burn_amount : nat };
  InsufficientFunds : record { balance : nat };
  TooOld;
  CreatedInFuture : record { ledger_time : nat64 };
  Duplicate : record { duplicate_of : nat64 };
  TemporarilyUnavailable;
  GenericError : record { error_code : nat; message : text };
};

type TransferResult = record {
  ok : opt nat64;
  err : opt TransferError;
};

service : {
  icrc1_name : () -> (text) query;
  icrc1_symbol : () -> (text) query;
  icrc1_decimals : () -> (nat8) query;
  icrc1_fee : () -> (nat) query;
  icrc1_metadata : () -> (vec record { text; text }) query;
  icrc1_total_supply : () -> (nat) query;
  icrc1_supported_standards : () -> (vec record { text; text }) query;
  icrc1_balance_of : (Account) -> (nat) query;
  icrc1_transfer : (TransferArgs) -> (TransferResult);
  mint_tokens : (principal, nat) -> (variant { Ok : nat64; Err : text });
} 