type CreateEscrowParams = record {
  maker : principal;
  hashlock : blob;
  token_canister : principal;
  amount : nat64;
  timelock : nat64;
};
type DestinationEscrow = record {
  id : text;
  maker : principal;
  taker : principal;
  updated_at : nat64;
  hashlock : blob;
  token_canister : principal;
  created_at : nat64;
  state : EscrowState;
  amount : nat64;
  timelock : nat64;
};
type Escrow = record {
  id : text;
  maker : principal;
  updated_at : nat64;
  hashlock : blob;
  token_canister : principal;
  created_at : nat64;
  state : EscrowState;
  amount : nat64;
  timelock : nat64;
};
type EscrowError = variant {
  InvalidAmount;
  InsufficientBalance;
  InvalidEscrowType;
  EscrowNotFound;
  TimelockExpired;
  Unauthorized;
  InvalidTimelock;
  InvalidHashlock;
  TransferFailed;
  TimelockNotExpired;
  InvalidState;
};
type EscrowState = variant { Refunded; Claimed; Funded; Created; Expired };
type Order = record {
  id : nat64;
  maker : principal;
  maker_asset : principal;
  taking_amount : nat64;
  metadata : opt OrderMetadata;
  making_amount : nat64;
  created_at : nat64;
  expiration : nat64;
  taker_asset : principal;
  allowed_taker : opt principal;
  receiver : principal;
};
type OrderError = variant {
  InvalidAssetPair;
  OrderCancelled;
  InvalidAmount;
  SystemError : text;
  OrderNotFound;
  InsufficientBalance;
  OrderExpired;
  Unauthorized;
  OrderAlreadyFilled;
  InvalidExpiration;
  TokenCallFailed : text;
  TransferFailed : text;
};
type OrderMetadata = record {
  hashlock : opt blob;
  target_chain : opt text;
  timelock : opt nat64;
};
type Result = variant { Ok; Err : OrderError };
type Result_1 = variant { Ok; Err : EscrowError };
type Result_2 = variant { Ok : text; Err : EscrowError };
type Result_3 = variant { Ok : nat64; Err : OrderError };
type Result_4 = variant { Ok : DestinationEscrow; Err : EscrowError };
type Result_5 = variant { Ok : Escrow; Err : EscrowError };
type Result_6 = variant { Ok : SourceEscrow; Err : EscrowError };
type SourceEscrow = record {
  id : text;
  maker : principal;
  taker : principal;
  updated_at : nat64;
  hashlock : blob;
  token_canister : principal;
  created_at : nat64;
  state : EscrowState;
  amount : nat64;
  timelock : nat64;
};
type SystemStats = record {
  error_counts : vec record { text; nat64 };
  orders_filled : nat64;
  total_volume : vec record { principal; nat64 };
  orders_created : nat64;
  orders_cancelled : nat64;
};
type TimelockStatus = variant { Active; Expired };
service : {
  cancel_order : (nat64) -> (Result);
  claim_destination_escrow : (text, blob) -> (Result_1);
  claim_escrow : (text, blob) -> (Result_1);
  claim_source_escrow : (text, blob) -> (Result_1);
  create_destination_escrow : (
      principal,
      principal,
      blob,
      principal,
      nat64,
      nat64,
    ) -> (Result_2);
  create_escrow : (CreateEscrowParams) -> (Result_2);
  create_order : (
      principal,
      principal,
      principal,
      nat64,
      nat64,
      nat64,
      opt principal,
    ) -> (Result_3);
  create_source_escrow : (
      principal,
      principal,
      blob,
      principal,
      nat64,
      nat64,
    ) -> (Result_2);
  deposit_tokens : (text, nat64) -> (Result_1);
  deposit_tokens_to_destination : (text, nat64) -> (Result_1);
  deposit_tokens_to_source : (text, nat64) -> (Result_1);
  fill_order : (nat64) -> (Result);
  get_active_orders : () -> (vec Order) query;
  get_destination_escrow_status : (text) -> (Result_4) query;
  get_escrow_status : (text) -> (Result_5) query;
  get_order : (nat64) -> (opt Order) query;
  get_orders_by_asset_pair : (principal, principal) -> (vec Order) query;
  get_orders_by_maker : (principal) -> (vec Order) query;
  get_source_escrow_status : (text) -> (Result_6) query;
  get_system_stats : () -> (SystemStats) query;
  greet : (text) -> (text) query;
  list_destination_escrows : () -> (vec SourceEscrow) query;
  list_escrows : () -> (vec Escrow) query;
  list_source_escrows : () -> (vec SourceEscrow) query;
  refund_destination_escrow : (text) -> (Result_1);
  refund_escrow : (text) -> (Result_1);
  refund_source_escrow : (text) -> (Result_1);
  test_timelock : (nat64) -> (TimelockStatus) query;
}
